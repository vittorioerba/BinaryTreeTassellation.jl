"""
Generate a binary tree of tiles of depth ```n```.
The tree is generated by recursvely splitting one tile into two subtiles, altrernating the orientation of the split.
The top-level tile will have ```size(tile) = (1,1)```

Additional arguments:
    - ```orientation::Orientation```: orientation of the top-level split. Defaults to ```H```.

"""
function generate_tree(n::Int; orientation = H)
    if n == 1
        return TileNode(1, 1) 
    else
        tile1 = generate_tree(n-1; orientation = orientation == H ? V : H)
        
        if orientation == H
            h = height(tile1)
            b1 = base(tile1)
            b2 = rand(Float64)
            b = b2 / (b1 + b2)
            rescale!((b1/(b1 + b2),1),tile1)
        else
            b = base(tile1)
            h1 = height(tile1)
            h2 = rand(Float64)
            h = h2 / (h1 + h2)
            rescale!((1,h1/(h1 + h2)),tile1)
        end

        tile2 = TileNode(b,h)

        if rand(Float64) < 0.5
            return TileLeaf((tile1,tile2),orientation)
        else
            return TileLeaf((tile2,tile1),orientation)
        end
    end
end

"""
Draw ```b*h``` grid of tiles generated by ```generate_tree(n)```, and save it to ```file```.

See [```Luxor``` documentation](http://juliagraphics.github.io/Luxor.jl/stable/) for a list of supported file formats.

Optional arguments:
    - ```size```: size in pixel of a single square of the grid. Defaults to ```500```;
    - ```palette```: the palette used to color tiles. Defaults to ```palette_StampingItOut```.

"""
function paint_tree((b,h), n, file; size=500, palette=palette_StampingItOut)
    Drawing(b*size,h*size,file)
    setline(1)
    for i in 0:b-1, j in 0:h-1
        start = (size*i,size*j)
        orient = rand(Float64) < 0.5 ? H : V
        tile = rescale!((size, size),generate_tree(n; orientation = orient))
        draw(tile; origin=start, palette=palette)
    end
    finish()
end




